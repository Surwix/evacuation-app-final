// --- Имитация работы ИИ для генерации структурированного плана ---\nfunction generateEvacuationPlan(address) {\n  console.log(`AI is generating a detailed plan for: ${address}`);\n  \n  // В реальном проекте здесь был бы сложный анализ и вызов внешних API\n  // Мы же создадим более подробные, но имитированные данные.\n  \n  const risks = [\n    { type: "Наводнение", level: "Низкий", advice: "Проверьте зоны затопления." },\n    { type: "Пожар", level: "Средний", advice: "Имейте огнетушитель, регулярно проверяйте проводку." },\n    { type: "Землетрясение", level: "Очень низкий", advice: "Знайте безопасные места в доме." }\n  ];\n\n  const emergencyContacts = [\n    { name: "Экстренные службы", number: "911" },\n    { name: "Пожарная служба", number: "Ваш местный номер" },\n    { name: "Ближайшая больница", number: "Ваш местный номер" }\n  ];\n\n  const essentialItems = [\n    "Документы (паспорта, свидетельства)",\n    "Наличные деньги",\n    "Запас воды и еды на 72 часа",\n    "Аптечка первой помощи",\n    "Фонарик и батарейки",\n    "Портативное зарядное устройство",\n    "Теплая одежда, одеяла"\n  ];\n\n  const evacuationSteps = [\n    "Сохраняйте спокойствие и следуйте плану.",\n    "Возьмите заранее подготовленный 'тревожный чемоданчик'.",\n    "Отключите газ, воду и электричество, если это безопасно.",\n    "Эвакуируйтесь через ближайший безопасный выход (например, южная сторона вашего дома).",\n    "Двигайтесь к ближайшему укрытию или месту сбора (например, к ближайшему парку).",\n    "Информируйте близких о своем местоположении.",\n    "Следуйте указаниям местных властей и служб экстренной помощи."\n  ];\n\n  return {\n    address: address,\n    reportDate: new Date().toLocaleDateString(\'ru-RU\', { year: \'numeric\', month: \'long\', day: \'numeric\' }),\n    risks: risks,\n    emergencyContacts: emergencyContacts,\n    essentialItems: essentialItems,\n    evacuationSteps: evacuationSteps,\n    disclaimer: "Этот план является базовым шаблоном и создан на основе общих рекомендаций. Всегда следуйте указаниям местных властей и экстренных служб. Вся информация предоставляется 'как есть', без каких-либо гарантий. Пользователь несет полную ответственность за использование этого плана."\n  };\n}\n```

**Важное изменение:** Теперь `generateEvacuationPlan` возвращает **JavaScript-объект** (по сути, JSON), а не HTML-строку. В этом объекте содержатся структурированные данные.

#### **Что дальше с PDFMonkey?**

Теперь, когда наш бэкенд генерирует структурированные данные, тебе нужно будет:

1.  **Создать или обновить шаблон в PDFMonkey:** В шаблоне PDFMonkey ты будешь использовать переменные, например `{{address}}`, `{{risks.0.type}}`, `{{essentialItems.1}}` и так далее, чтобы вставить эти данные в нужные места и оформить их так, как ты хочешь (таблицы для рисков, списки для вещей).
2.  **Обновить вызов API PDFMonkey:** В файле `api/generate-plan.js`, где мы сейчас отправляем `evacuationPlanHtml` в `sendMail`, тебе нужно будет отправить этот **структурированный объект** в PDFMonkey. Тебе понадобится настроить HTTP-запрос к API PDFMonkey, передав ему объект `evacuationPlanData` и `templateId`. Затем ты получишь ссылку на сгенерированный PDF, скачаешь его и прикрепишь к письму.

---

### **2. Добавление правил и условий использования (Terms & Conditions)**

Это очень важный шаг для любого публичного сервиса. Мы добавим:

1.  **На фронтенде (`index.html`):** Чекбокс "Я согласен с условиями" и ссылку на текст условий.
2.  **На фронтенде (`script.js`):** Логику, которая не позволит отправить форму, пока чекбокс не будет отмечен.
3.  **На бэкенде (`api/generate-plan.js`):** Проверку, что этот флаг был установлен.

Пожалуйста, сначала обнови свой файл `api/generate-plan.js` с новой функцией `generateEvacuationPlan`. Как только ты это сделаешь, дай мне знать, и мы перейдем к изменениям на фронтенде (`index.html` и `script.js`) и обсудим интеграцию с PDFMonkey подробнее.

Как продвигаются дела с `style.css`, которые я присылал ранее? Успешно обновил его?
